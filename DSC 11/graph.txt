GRAPH
e = v
e (edges) > v (vertices)
v (vertices) > e (edges) 
e = v - 1


WEIGHTS
can be +, -, 0


SHORTEST PATH FIRST
- start point, end point
- all vertices visited only once
- e, v, w
- e - route path, w - cost of travelling distance


DIJKSTRA ALGORITHM - O(n**2) - isko isse jada reduce nahi kar sakte h
- our objective to minimise the Weights
- Relaxation
    if (d[u] + c[u,v] < d[v]){
        d[v] = d[u] + c[u,v];
    }


MINIMUM SPANNING TREE
- G(v,e,w)
- we should list all the minimum edges such that there exists no vertex in the set which is not connected
- no repetition of vertex
- no repetition of edges
- no cycle
- every tree is a graph, every graph is not a tree
- the solution was given by Prims and Kruskals


PRIMS
total = v
vi = {vi -> vj} minimum


KRUSKALS
- let us start with all minimised costs
- no cycle is compulsory
    Kruskals(G,w)   //G=(v,e)
    A <- phi
    for each v belong G{
        make set v()
        sort_set in non-decreasing / increasing order{
            for each edge[u,v] belong G,E{
                if find_set(u){
                    A = A union(u,v)
                    union(u,v)
                }
                return A
            }
        }
    }


Problem - DIJKSTRA ka code likhna h
Problem - 
        - plan a journey from all the sources taking distance as edge weight
        - calculate total journey expenditure based on 3-tier ac class railway ticket
        - suppose the maximum weight carrying capacity of the traveller is 15kg and 
            - one pair of cloth weighs - 700gms
            - blanket and other - 2kg
            - other essential items - 1kg
            - reserve 1-time meal - 500gms
            - water bottle - 1kg
            - electronics - 2.5kg
        - mention the other essential items required within weight limit