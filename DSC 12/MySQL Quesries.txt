1) Query to display Employee Name, Job, Hire Date, Employee Number; for each employee with the Employee Number appearing first.

SELECT eno AS "Employee Number", 
ename AS "Employee Name", 
job_type AS "Job", 
hire_date AS "Hire Date" 
from employees;


2) Query to display Unique Jobs from the Employee Table.

SELECT DISTINCT job_type
from employees;


3) Query to display the Employee Name concatenated by a Job separated by a comma.

SELECT CONCAT(ename, ', ', job_type) AS "Employee, Job"
FROM EMPLOYEES;


4) Query to display all the data from the Employee Table. Separate each Column by a comma and name the said column as THE_OUTPUT.

SELECT CONCAT(eno, ', ', ename, ', ', job_type, ', ', COALESCE(manager, 'NULL'), ', ', hire_date, ', ', dno, ', ', COALESCE(commission, '0.00'), ', ', salary) AS THE_OUTPUT
FROM EMPLOYEES;


5) Query to display the Employee Name & Salary of all the employees earning more than $2850.

SELECT ename AS "Employee Name",
salary AS "Salary"
FROM EMPLOYEES
WHERE salary > 2850;


6) Query to display Employee Name & Department Number for the Employee No= 7900.

SELECT ename AS "Employee Name",
dno AS "Department Number"
FROM EMPLOYEES
WHERE eno = 7900;


7) Query to display Employee Name & Salary for all employees whose salary is not in the range of $1500 and $2850.

SELECT ename AS "Employee Name",
salary AS "Salary"
FROM EMPLOYEES
WHERE salary < 1500 OR salary > 2850;


8) Query to display Employee Name, Job, and Hire Date of all the employees hired between Feb 20, 1981 and May 1, 1981. Order the query in ascending order of Start Date.

SELECT ename AS "Employee Name",
job_type AS "Job",
hire_date AS "Hire Date"
FROM EMPLOYEES
WHERE hire_date BETWEEN '1981-02-20' AND '1981-05-01'
ORDER BY hire_date ASC;


9) Query to display Employee Name & Department No. of all the employees in Dept 10 and Dept 30 in the alphabetical order by name.

SELECT ename AS "Employee Name",
dno AS "Department Number"
FROM EMPLOYEES
WHERE dno IN (10, 30)
ORDER BY ename ASC;


10) Query to display Employee Name & Salary of employees who earned more than $1500 and are in Department 10 or 30.

SELECT ename AS "Employee Name",
salary AS "Salary"
FROM EMPLOYEES
WHERE salary > 1500 AND dno IN (10, 30);

11) Query to display Name & Hire Date of every Employee who was hired in 1981.

SELECT ename AS "Employee Name",
hire_date AS "Hire Date"
FROM EMPLOYEES
WHERE EXTRACT(YEAR FROM hire_date) = 1981;

12) Query to display Name & Job of all employees who don’t have a current Manager.

SELECT ename AS "Employee Name",
job_type AS "Job"
FROM EMPLOYEES
WHERE manager IS NULL;

13) Query to display the Name, Salary & Commission for all the employees who earn commission. Sort the data in descending order of Salary and Commission.

SELECT ename AS "Employee Name",
salary AS "Salary",
commission AS "Commission"
FROM EMPLOYEES
WHERE commission IS NOT NULL
ORDER BY salary DESC, commission DESC;

14) Query to display Name of all the employees where the third letter of their name is ‘A’.

SELECT ename AS "Employee Name"
FROM EMPLOYEES
WHERE SUBSTR(ename, 3, 1) = 'A';

15) Query to display Name of all employees either have two ‘R’s or have two ‘A’s in their name & are either in Dept No = 30 or their Manager’s Employee No = 7788.

SELECT ename AS "Employee Name"
FROM EMPLOYEES
WHERE (ename LIKE '%R%R%' OR ename LIKE '%A%A%')
AND (dno = 30 OR manager = 7788);

16) Query to display Name, Job, and Salary of all employees whose Job is Clerical or Analyst & their salaries are not equal to 1000, 3000, or 5000.

SELECT ename AS "Employee Name",
job_type AS "Job",
salary AS "Salary"
FROM EMPLOYEES
WHERE job_type IN ('Clerk', 'Analyst')
AND salary NOT IN (1000, 3000, 5000);

17) Query to display Name, Salary, and Commission for all employees whose Commission Amount is greater than their Salary increased by 5%.

SELECT ename AS "Employee Name",
salary AS "Salary",
commission AS "Commission"
FROM EMPLOYEES
WHERE commission > salary * 1.05;

18) Query to display the Current Date.

SELECT CURRENT_DATE AS "Current Date";

19) Query to display Employee No., Name, Salary, and the Salary increased by 15% expressed as an absolute whole number.

SELECT eno AS "Employee Number",
ename AS "Employee Name",
salary AS "Salary", 
ROUND(salary * 1.15) AS "Increased Salary"
FROM EMPLOYEES;

20) Query to display Name, Hire Date, and Salary Review Date which is the 1st Monday after six months of employment.

SELECT ename AS "Employee Name", 
hire_date AS "Hire Date",
DATE_ADD(hire_date, INTERVAL 6 MONTH) AS "Six Months Later",
DATE_ADD(DATE_ADD(hire_date, INTERVAL 6 MONTH), 
INTERVAL (8 - DAYOFWEEK(DATE_ADD(hire_date, INTERVAL 6 MONTH))) % 7 DAY) AS "Salary Review Date"
FROM EMPLOYEES;

21) Query to display the employees that earn a salary that is higher than the salary of any of the clerks.

SELECT ename AS "Employee Name",
salary AS "Salary"
FROM EMPLOYEES
WHERE salary > ANY (SELECT salary FROM EMPLOYEE WHERE job_type = 'Clerk');

22) Query to display Name and calculate the number of months between today and the date each employee was hired.

SELECT ename AS "Employee Name", 
TIMESTAMPDIFF(MONTH, hire_date, CURDATE()) AS "Months Since Hire"
FROM EMPLOYEES;

23) Query to display <E-Name> earns <Salary> monthly but wants <3 * Current Salary>. Label as Dream Salary.

SELECT ename, 
CONCAT(ename, ' earns ', salary, ' monthly but wants ', salary * 3) AS "Dream Salary"
FROM EMPLOYEES;

24) Query to display Name and Salary, formatted to 15 characters long, left-padded with '$' sign.

SELECT ename AS "Employee Name", 
LPAD(CONCAT('$', salary), 15, '$') AS "Formatted Salary"
FROM EMPLOYEES;

25) Query to display Name with the 1st letter capitalized & name length, for names starting with ‘J’, ‘A’, or ‘M’.

SELECT CONCAT(UPPER(LEFT(ename, 1)), LOWER(SUBSTRING(ename, 2))) AS "Formatted Name", 
LENGTH(ename) AS "Name Length"
FROM EMPLOYEES
WHERE LEFT(ename, 1) IN ('J', 'A', 'M');

26) Query to display Name, Hire Date, and Day of the week on which the employee started.

SELECT ename AS "Employee Name", hire_date AS "Hire Date",
DAYNAME(hire_date) AS "Day of the Week"
FROM EMPLOYEES;

27) Query to display Name and Commission Amount, defaulting to 'No Commission' if NULL.

SELECT ename AS "Employee Name", 
COALESCE(CONCAT('$', commission), 'No Commission') AS "Commission"
FROM EMPLOYEES;

28) Query to display Name, Department Name, and Department No for all employees.

SELECT e.ename AS "Employee Name", d.dname AS "Department Name", e.dno AS "Department Number"
FROM EMPLOYEES e
JOIN dept d ON e.dno = d.dno;

29) Query to display a unique listing of all Jobs in Department #30.

SELECT DISTINCT job_type AS "Job"
FROM EMPLOYEES
WHERE dno = 30;

30) Query to display Name, Department Name, and Location for employees earning a commission.

SELECT e.ename AS "Employee Name",
d.dname AS "Department Name",
d.location AS "Location"
FROM EMPLOYEES e
JOIN dept d ON e.dno = d.dno
WHERE e.commission IS NOT NULL;

31) Employees with 'A' in their name

SELECT ename, dname
FROM EMPLOYEES e
JOIN dept d ON e.dno = d.dno
WHERE ename LIKE '%A%';

32) Employees working in Dallas

SELECT ename, job_type, e.dno, d.dname
FROM EMPLOYEES e
JOIN dept d ON e.dno = d.dno
WHERE d.location = 'DALLAS';

33) Employee and their Manager

SELECT e.ename AS "Employee Name", e.eno, 
       m.ename AS "Manager Name", m.eno AS "Manager No"
FROM EMPLOYEES e
LEFT JOIN EMPLOYEES m ON e.manager = m.eno;

34) Including employees without manager

SELECT e.ename AS "Employee Name", e.eno,
       COALESCE(m.ename, 'No Manager') AS "Manager Name", 
       COALESCE(m.eno, '---') AS "Manager No"
FROM EMPLOYEES e
LEFT JOIN EMPLOYEES m ON e.manager = m.eno;

35) Employees with salary > avg salary and in dept with someone with 'T' in name

SELECT eno, ename, salary
FROM EMPLOYEES
WHERE salary > (SELECT AVG(salary) FROM EMPLOYEES)
AND dno IN (
    SELECT DISTINCT dno FROM EMPLOYEES WHERE ename LIKE '%T%'
);

36) Employees with matching dept and salary of someone who earns commission

SELECT ename, dno, salary
FROM EMPLOYEES
WHERE (dno, salary) IN (
    SELECT dno, salary FROM EMPLOYEES WHERE commission IS NOT NULL
);

37) Employees hired after Blake

SELECT ename, hire_date
FROM EMPLOYEES
WHERE hire_date > (
    SELECT hire_date FROM EMPLOYEES WHERE ename = 'BLAKE'
);

38) Employees hired before their manager

SELECT e.ename AS "Employee", e.hire_date AS "Emp Hire Date",
       m.ename AS "Manager", m.hire_date AS "Mgr Hire Date"
FROM EMPLOYEES e
JOIN EMPLOYEES m ON e.manager = m.eno
WHERE e.hire_date < m.hire_date;

39) Salary as asterisks

SELECT ename, 
REPEAT('*', salary DIV 100) AS "Salary in *"
FROM EMPLOYEES;

40) Salary stats: max, min, sum, avg

SELECT MAX(salary) AS "Highest", MIN(salary) AS "Lowest",
       SUM(salary) AS "Total", AVG(salary) AS "Average"
FROM EMPLOYEES;

41) Salary stats per job

SELECT job_type, 
       MAX(salary) AS "Max", MIN(salary) AS "Min",
       SUM(salary) AS "Total", AVG(salary) AS "Avg"
FROM EMPLOYEES
GROUP BY job_type;

42) Count of employees by job

SELECT job_type, COUNT(*) AS "No. of Employees"
FROM EMPLOYEES
GROUP BY job_type;

43) Number of managers (excluding duplicates)

SELECT COUNT(DISTINCT manager) AS "No. of Managers"
FROM EMPLOYEES
WHERE manager IS NOT NULL;

44) Difference between highest and lowest salary

SELECT MAX(salary) - MIN(salary) AS "Salary Range"
FROM EMPLOYEES;

45) Lowest paid employee per manager (min salary >= 1000)

SELECT manager, MIN(salary) AS "Lowest Salary"
FROM EMPLOYEES
WHERE manager IS NOT NULL
GROUP BY manager
HAVING MIN(salary) >= 1000;

46) Department name, location, count, avg salary

SELECT d.dname, d.location, COUNT(e.eno) AS "Total Employees", 
       AVG(e.salary) AS "Avg Salary"
FROM EMPLOYEES e
JOIN dept d ON e.dno = d.dno
GROUP BY d.dname, d.location;

47) Employees in same dept as Blake

SELECT ename, hire_date
FROM EMPLOYEES
WHERE dno = (SELECT dno FROM EMPLOYEES WHERE ename = 'BLAKE');

48) Employees earning more than avg salary

SELECT eno, ename
FROM EMPLOYEES
WHERE salary > (SELECT AVG(salary) FROM EMPLOYEES);

49) Employees in dept with someone whose name has 'T'

SELECT eno, ename
FROM EMPLOYEES
WHERE dno IN (
    SELECT DISTINCT dno FROM EMPLOYEES WHERE ename LIKE '%T%');


50) Employees reporting to King

SELECT ename, salary
FROM EMPLOYEES
WHERE manager = (SELECT eno FROM EMPLOYEES WHERE ename = 'KING');

51) Sales Dept employees

SELECT d.dno, d.dname, e.job_type
FROM EMPLOYEES e
JOIN dept d ON e.dno = d.dno
WHERE d.dname = 'SALES';

52) Managers earning more than avg salary of their department

SELECT DISTINCT m.ename AS "Manager Name", m.salary AS "Manager Salary"
FROM EMPLOYEES e
JOIN EMPLOYEES m ON e.manager = m.eno
WHERE m.salary > (
    SELECT AVG(salary)
    FROM EMPLOYEES e2
    WHERE e2.dno = e.dno
);